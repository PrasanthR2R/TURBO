/******** NEXUS – Settings + Signals Auditor (Google Ads Scripts)
 * Scope: MCC or single account
 * Outputs (append-only; headers if missing; nothing else touched):
 *   - Settings_Audit
 *   - Performance_Levers
 * Health log:
 *   - NEXUS_Engine_Health_Log
 *
 * THIS VERSION:
 *   - Scans ALL accessible accounts (no currency or spend filter).
 *   - MCC batching ≤50 with hard de-duplication of customer IDs.
 *   - Partners/Device via GAQL (no deprecated fields).
 *   - Customer/conversion/auto-apply via GAQL when available; otherwise logs
 *     "Unavailable in Scripts" with a precise UI fix path.
 ***********************************************************************/

/*** ===== CONSTANTS ===== ***/
// Your output Google Sheet (TURBO). You can create new tabs here.
var SPREADSHEET_URL = 'https://docs.google.com/spreadsheets/d/1VjU6Rs_44TeXtyXmLJriA9TosTcgA_H3bCT7-ZXk-F4/edit#gid=1299411243';

// Analysis window for performance levers
var WINDOW_METRICS   = 'LAST_30_DAYS';

// Partners thresholds
var PARTNERS_SPEND_ZERO_CONV = 50;
var PARTNERS_MIN_SPEND_ALERT = 25;
var PARTNERS_CPA_RATIO_LIMIT = 1.5;
var PARTNERS_CTR_RATIO_LIMIT = 0.6;

// Device/Geo thresholds
var DEVGEO_MIN_SPEND = 30;
var DEVGEO_MAX_MOD   = 0.40;              // cap ±40%
var DEVGEO_STEP      = 0.10;              // 10% steps

// Required language(s) for Search/PMAX check
var LANG_REQUIRED = ['English'];

// If you want to validate campaign-level required conversions later, add names:
var REQUIRED_CONVERSION_NAMES = [];       // e.g., ['Lead form','Phone call','GA4 Lead']

// MCC batching (hard platform limits)
var BATCH_SIZE            = 50;           // executeInParallel supports up to 50 accounts per call
var MAX_PARALLEL_THREADS  = 50;           // run up to 50 in parallel

// Optional: limit MCC scope to labeled accounts (leave [] to include all)
var MCC_ACCOUNT_LABEL_FILTERS = [];       // e.g., ['Active Dealers']

// Tabs
var TAB_SETTINGS = 'Settings_Audit';
var TAB_LEVERS   = 'Performance_Levers';
var TAB_HEALTH   = 'NEXUS_Engine_Health_Log';

// Headers (exact order, enforced)
var HDR_SETTINGS = [
  'Date','Customer ID','Account','Campaign ID','Campaign','Check','Current','Expected','Severity','Fix Tip'
];

var HDR_LEVERS = [
  'Date','Customer ID','Account','Campaign ID','Campaign',
  'Scope','Target','Spend','Conversions','CPA','Baseline CPA','Delta %','Suggested Modifier','Reason'
];

var HDR_HEALTH = ['Date','Module','Accounts Scanned','Findings Count','Errors'];

// Kid-safety patterns (single OR-regex; case-insensitive). Toyota guard included.
var KID_SAFETY_REGEX = new RegExp([
  '(?:child|children|kids?|toddler|baby|babies|nursery|preschool|kindergarten|daycare|childcare|school|schools|elementary|middle[\\s-]?school)',
  '(?:cartoon|nursery\\s?rhymes|lullaby|phonics|alphabet|abc|123|color(?:ing|[\\s-]?by[\\s-]?number)|storytime)',
  '(?:\\btoy(s)?\\b(?!ota)|lego|barbie|hasbro|mattel|play[\\s-]?doh|fisher[\\s-]?price|hot[\\s-]?wheels)',
  '(?:cocomelon|peppa(?:\\s|-)?pig|paw(?:\\s|-)?patrol|pj(?:\\s|-)?masks|nick(?:\\s|-)?jr|disney(?:\\s|-)?junior|baby(?:\\s|-)?tv)',
  '(?:roblox|minecraft|fortnite|coolmathgames|y8\\.com|miniclip|poki\\.com|friv)',
  '(?:play\\.google\\.com\\/store\\/apps\\/details.*(?:kids|family|educat|games)|apps\\.apple\\.com\\/.*\\/app\\/.*(?:kids|family|learn|abc|games))'
].join('|'), 'i');

/*** ===== ENTRY ===== ***/
function main () {
  var isMcc = isManagerScope_();
  if (!isMcc) {
    var result = scanSingleAccount_(JSON.stringify({ sheetUrl: SPREADSHEET_URL }));
    var r = safeJsonParse_(result, {});
    writeHealthLog_([r]);
    return;
  }

  // MCC path with strict batching (≤50) and hard de-duplication
  var allIds = getAllAccountIdsDedup_(); // returns array of unique customer IDs (with dashes)
  var input  = JSON.stringify({ sheetUrl: SPREADSHEET_URL });

  for (var i = 0; i < allIds.length; i += BATCH_SIZE) {
    var chunk = allIds.slice(i, i + BATCH_SIZE);
    AdsManagerApp.accounts()
      .withIds(chunk)
      .executeInParallel('scanSingleAccount_', 'onComplete_', input, MAX_PARALLEL_THREADS);
  }
}

/*** ===== PARALLEL WORKER (runs in child scope) ===== ***/
function scanSingleAccount_(inputJson) {
  var input = safeJsonParse_(inputJson, {});
  var sheetUrl = input.sheetUrl || SPREADSHEET_URL;

  var out = {
    cid: getCid_(),
    name: AdsApp.currentAccount().getName(),
    findings: 0,
    errors: 0,
    scanned: 0,
    reason: ''
  };

  try {
    var tz = AdsApp.currentAccount().getTimeZone();
    var today = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');

    var settingsFindings = [];
    var leverFindings = [];

    // ====== Campaign-level scans (SEARCH) ======
    var searchIt = AdsApp.campaigns()
      .withCondition("AdvertisingChannelType = SEARCH")
      .withCondition("Status = ENABLED")
      .get();

    while (searchIt.hasNext()) {
      var c = searchIt.next();
      var cInfo = { id: String(c.getId()), name: c.getName() };

      // A1 Networks — Search partners OFF; Display expansion OFF; Search network ON
      try {
        var ns = c.getNetworkSettings && c.getNetworkSettings();
        if (ns && ns.isSearchPartnerNetworkEnabled && ns.isSearchPartnerNetworkEnabled()) {
          settingsFindings.push(makeSettingsRow_(today, cInfo, 'Search Partners', 'ON', 'OFF', 'High',
            'Settings → Networks → uncheck "Include Google search partners".'));
        }
        if (ns && ns.isContentNetworkEnabled && ns.isContentNetworkEnabled()) {
          settingsFindings.push(makeSettingsRow_(today, cInfo, 'Display Expansion', 'ON', 'OFF', 'High',
            'Settings → Networks → uncheck "Include Google Display Network".'));
        }
        if (ns && ns.isSearchNetworkEnabled && !ns.isSearchNetworkEnabled()) {
          settingsFindings.push(makeSettingsRow_(today, cInfo, 'Search Network', 'OFF', 'ON', 'High',
            'Campaign → Settings → Networks → enable Search Network.'));
        }
      } catch (eNet) {
        settingsFindings.push(makeSettingsRow_(today, cInfo, 'Networks', 'Unavailable in Scripts', 'Search=ON, Partners=OFF, Display=OFF', 'Info',
          'Campaign → Settings → Networks.'));
      }

      // A2 Location Options — Presence only (not exposed → Info row)
      settingsFindings.push(makeSettingsRow_(today, cInfo, 'Location Option', 'Unavailable in Scripts', 'PRESENCE', 'Info',
        'Location options → select "Presence: People in or regularly in your included locations".'));

      // A3 Conversion selections (info note until Scripts exposes full mapping)
      if (REQUIRED_CONVERSION_NAMES && REQUIRED_CONVERSION_NAMES.length) {
        settingsFindings.push(makeSettingsRow_(today, cInfo, 'Conversion Selection', 'Unavailable in Scripts', 'All required', 'Info',
          'Campaign settings → Choose conversion goals → include all lead conversions.'));
      }

      // A8 Language targeting — English only
      try {
        var langs = [];
        var langIt = c.targeting && c.targeting().languages().get();
        if (langIt) while (langIt.hasNext()) {
          var lang = langIt.next();
          if (lang.getName) langs.push(lang.getName());
        }
        var currentLang = langs.length ? langs.join(', ') : 'All languages';
        var isOk = (langs.length === 1 && langs[0] === 'English');
        if (!isOk) {
          settingsFindings.push(makeSettingsRow_(today, cInfo, 'Language Targeting', currentLang, 'English only', 'Medium',
            'Campaign → Additional settings → Languages → set to English.'));
        }
      } catch (eLang) {
        settingsFindings.push(makeSettingsRow_(today, cInfo, 'Language Targeting', 'Unavailable in Scripts', 'English only', 'Info',
          'Campaign → Additional settings → Languages → set to English.'));
      }

      // A9 Kid-safety excluded placements (campaign + ad group)
      try {
        var epIt = c.targeting && c.targeting().excludedPlacements().get();
        if (epIt) while (epIt.hasNext()) {
          var ep = epIt.next();
          var url = ep.getUrl && ep.getUrl();
          if (url && KID_SAFETY_REGEX.test(url)) {
            settingsFindings.push(makeSettingsRow_(today, cInfo, 'Excluded Placement (Kid-Safety)', url, 'Excluded', 'Info', 'Brand safety ✓'));
          }
        }
        var agIt = c.adGroups().get();
        while (agIt.hasNext()) {
          var ag = agIt.next();
          var agEpIt = ag.targeting && ag.targeting().excludedPlacements().get();
          if (agEpIt) while (agEpIt.hasNext()) {
            var agp = agEpIt.next();
            var aurl = agp.getUrl && agp.getUrl();
            if (aurl && KID_SAFETY_REGEX.test(aurl)) {
              settingsFindings.push(makeSettingsRow_(today, cInfo, 'Excluded Placement (Kid-Safety)', aurl, 'Excluded', 'Info', 'Brand safety ✓'));
            }
          }
        }
      } catch(ePlace) {}
    }

    // PMax: Language targeting
    try {
      var pmaxIt = AdsApp.performanceMaxCampaigns().withCondition("Status = ENABLED").get();
      while (pmaxIt.hasNext()) {
        var p = pmaxIt.next();
        var pInfo = { id: String(p.getId()), name: p.getName() };
        try {
          var plangs = [];
          var plIt = p.targeting && p.targeting().languages().get();
          if (plIt) while (plIt.hasNext()) {
            var pl = plIt.next();
            if (pl.getName) plangs.push(pl.getName());
          }
          var currentP = plangs.length ? plangs.join(', ') : 'All languages';
          var pOk = (plangs.length === 1 && plangs[0] === 'English');
          if (!pOk) {
            settingsFindings.push(makeSettingsRow_(today, pInfo, 'Language Targeting', currentP, 'English only', 'Medium',
              'Campaign → Additional settings → Languages → set to English.'));
          }
        } catch (ePmaxLang) {
          settingsFindings.push(makeSettingsRow_(today, pInfo, 'Language Targeting', 'Unavailable in Scripts', 'English only', 'Info',
            'Campaign → Additional settings → Languages → set to English.'));
        }
      }
    } catch(ePmax) {}

    // ====== Account-level items via GAQL where possible ======
    // A6 ECFL, A7 Call Reporting/Default Call Conversion
    try {
      var acct = fetchCustomerSettingsGAQL_(); // {ecflEnabled, callReportingEnabled, callConversionAction}
      var ecflCur = acct.ecflEnabled ? 'ON' : 'OFF';
      if (ecflCur !== 'ON') {
        settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
          'Enhanced Conversions for Leads', ecflCur, 'ON', 'High',
          'Goals → Settings → Turn on enhanced conversions for leads.'
        ]);
      }
      var callCur = (!acct.callReportingEnabled) ? 'Disabled'
                 : (!acct.callConversionAction ? 'None' : 'Enabled + Default');
      if (callCur !== 'Enabled + Default') {
        settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
          'Call Conversion Action', callCur, 'Enabled + Default', 'High',
          'Goals → Settings → Call conversion action (select default).'
        ]);
      }
    } catch(eCust) {
      settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
        'Enhanced Conversions for Leads', 'Unavailable in Scripts', 'ON', 'High',
        'Goals → Settings → Turn on enhanced conversions for leads.'
      ]);
      settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
        'Call Conversion Action', 'Unavailable in Scripts', 'Enabled + Default', 'High',
        'Goals → Settings → Call conversion action (select default).'
      ]);
    }

    // A4/A5 conversions & attribution
    try {
      var convs = fetchConversionActionsGAQL_(); // [{name, primary, attribModel, ddaStatus, category}]
      for (var i = 0; i < convs.length; i++) {
        var ca = convs[i];
        if (isLeadCategory_(ca.category) && !ca.primary) {
          settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
            'Primary vs Secondary', 'Secondary (' + ca.name + ')', 'Primary', 'High',
            'Goals → Conversions → mark this conversion as Primary.'
          ]);
        }
        if (ca.attribModel !== 'DATA_DRIVEN') {
          var sev = (ca.ddaStatus === 'AVAILABLE' || ca.ddaStatus === 'STABLE' || ca.ddaStatus === 'LEARNING') ? 'Medium' : 'Info';
          settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
            'Attribution Model', ca.attribModel + ' (' + ca.name + ')', 'DATA_DRIVEN', sev,
            'Goals → Conversions → Attribution → Data-driven (where eligible).'
          ]);
        }
      }
    } catch(eCA) {
      settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
        'Primary vs Secondary', 'Unavailable in Scripts', 'Primary', 'High',
        'Goals → Conversions → mark each lead conversion as Primary.'
      ]);
      settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
        'Attribution Model', 'Unavailable in Scripts', 'DATA_DRIVEN', 'Info',
        'Goals → Conversions → Attribution → Data-driven (where eligible).'
      ]);
    }

    // A10 Auto-apply subscriptions
    try {
      var subs = fetchAutoApplySubscriptionsGAQL_(); // [{type,status}]
      for (var j = 0; j < subs.length; j++) {
        if (subs[j].status !== 'ENABLED') continue;
        var t = subs[j].type;
        var name = prettySubscriptionName_(t);
        var sev = isRiskySubscription_(t) ? 'High' : 'Info';
        settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
          'Auto-apply Recommendation', '"' + name + '" ON', 'OFF', sev,
          'Recommendations → Auto-apply → turn OFF.'
        ]);
      }
    } catch(eSub) {
      settingsFindings.push([today, getCid_(), AdsApp.currentAccount().getName(), '', '',
        'Auto-apply Recommendation', 'Unavailable in Scripts', 'OFF (for risky items)', 'Info',
        'Recommendations → Auto-apply → turn OFF risky items: Broad Match, Create new Search campaigns, Automatically created assets, Raise budgets.'
      ]);
    }

    // ===== Performance Levers =====
    var baseline = fetchCampaignTotalsGAQL_(WINDOW_METRICS); // {cid: {name, cost, conv, cpa}}

    // B1: Search vs Search Partners (GAQL; replaces deprecated AdNetworkType1)
    var partners = fetchPartnersGAQL_(WINDOW_METRICS); // {cid: {name, search:{cost,conv,ctr}, partners:{cost,conv,ctr}}}
    Object.keys(partners).forEach(function(cid) {
      var row = partners[cid];
      var s = row.search || {};
      var p = row.partners || {};
      var spendP = toNum_(p.cost);
      var convP  = toNum_(p.conv);
      var cpaP   = calcCpa_(p.cost, p.conv);
      var cpaS   = calcCpa_(s.cost, s.conv);
      var ctrS   = toNum_(s.ctr);
      var ctrP   = toNum_(p.ctr);

      var shouldEmit = false;
      var reason = '';
      var suggested = 'Turn OFF';

      if (spendP >= PARTNERS_SPEND_ZERO_CONV && convP === 0) {
        shouldEmit = true; reason = 'High spend zero conv.';
      }
      if (!shouldEmit && spendP >= PARTNERS_MIN_SPEND_ALERT && isFinite(cpaS) && cpaS > 0 && isFinite(cpaP) && (cpaP / cpaS) > PARTNERS_CPA_RATIO_LIMIT) {
        shouldEmit = true; reason = 'CPA high.';
      }
      if (!shouldEmit && spendP >= PARTNERS_MIN_SPEND_ALERT && ctrS > 0 && (ctrP / ctrS) < PARTNERS_CTR_RATIO_LIMIT) {
        shouldEmit = true; reason = 'CTR low.';
      }

      if (shouldEmit) {
        var baseCpa = isFinite(cpaS) ? cpaS : '';
        leverFindings.push([
          today, getCid_(), AdsApp.currentAccount().getName(),
          cid, row.name,
          'PARTNERS','SEARCH_PARTNERS',
          round2_(spendP), convP, round2_(cpaP), round2_(baseCpa),
          deltaPct_(cpaP, baseCpa),
          suggested, reason
        ]);
      }
    });

    // B2: Device (GAQL)
    var devices = fetchDevicesGAQL_(WINDOW_METRICS); // {cid: {name, rows:[{device,cost,conv,cpa}]}}
    Object.keys(devices).forEach(function(cid) {
      if (!baseline[cid]) return;
      var base = baseline[cid];
      var baseCpa = calcCpa_(base.cost, base.conv);
      if (!isFinite(baseCpa) || baseCpa <= 0) return;

      devices[cid].rows.forEach(function(d) {
        var spend = toNum_(d.cost);
        var devCpa = calcCpa_(d.cost, d.conv);

        if (spend >= DEVGEO_MIN_SPEND && isFinite(devCpa) && devCpa >= 0) {
          var ratio = devCpa / baseCpa;
          if (Math.abs(ratio - 1) >= 0.15) {
            var mod = computeModifier_(ratio);
            var reason = 'CPA ratio=' + round2_(ratio);
            leverFindings.push([
              today, getCid_(), AdsApp.currentAccount().getName(),
              cid, devices[cid].name,
              'DEVICE', d.device, round2_(spend), toNum_(d.conv), round2_(devCpa), round2_(baseCpa),
              deltaPct_(devCpa, baseCpa),
              mod, reason
            ]);
          }
        } else if (spend >= DEVGEO_MIN_SPEND && toNum_(d.conv) === 0) {
          var modZero = '-' + Math.round(DEVGEO_MAX_MOD * 100) + '%';
          leverFindings.push([
            today, getCid_(), AdsApp.currentAccount().getName(),
            cid, devices[cid].name,
            'DEVICE', d.device, round2_(spend), 0, '', round2_(baseCpa),
            '', modZero, 'Zero-conv with spend'
          ]);
        }
      });
    });

    // B3: Geo (AWQL GEO_PERFORMANCE_REPORT for readable region names)
    var geos = fetchGeoRegionsAWQL_(WINDOW_METRICS); // {cid: {name, rows:[{region,cost,conv,cpa}]}}
    Object.keys(geos).forEach(function(cid) {
      if (!baseline[cid]) return;
      var base = baseline[cid];
      var baseCpa = calcCpa_(base.cost, base.conv);
      geos[cid].rows.forEach(function(g) {
        var spend = toNum_(g.cost);
        var conv  = toNum_(g.conv);
        var geoLabel = g.region || '(unknown)';

        if (spend >= DEVGEO_MIN_SPEND) {
          if (conv === 0) {
            leverFindings.push([
              today, getCid_(), AdsApp.currentAccount().getName(),
              cid, geos[cid].name,
              'GEO', geoLabel, round2_(spend), 0, '', round2_(baseCpa),
              '', 'Exclude', 'Zero-conv high spend'
            ]);
          } else if (isFinite(baseCpa) && baseCpa > 0) {
            var geoCpa = calcCpa_(g.cost, g.conv);
            var ratio = geoCpa / baseCpa;
            if (Math.abs(ratio - 1) >= 0.15) {
              var modG = computeModifier_(ratio);
              var reasonG = 'CPA ratio=' + round2_(ratio);
              leverFindings.push([
                today, getCid_(), AdsApp.currentAccount().getName(),
                cid, geos[cid].name,
                'GEO', geoLabel, round2_(spend), conv, round2_(geoCpa), round2_(baseCpa),
                deltaPct_(geoCpa, baseCpa),
                modG, reasonG
              ]);
            }
          }
        }
      });
    });

    // ===== Flush rows (append) =====
    if (settingsFindings.length) {
      safeAppendSettingsRows_(sheetUrl, settingsFindings);
      out.findings += settingsFindings.length;
    }
    if (leverFindings.length) {
      safeAppendLeverRows_(sheetUrl, leverFindings);
      out.findings += leverFindings.length;
    }
    out.scanned = 1;

  } catch (e) {
    out.errors++;
    out.reason = stringifyError_(e);
  }

  return JSON.stringify(out);
}

/*** ===== PARALLEL COMPLETION (MCC batch) ===== ***/
function onComplete_(results) {
  var parsed = [];
  for (var i = 0; i < results.length; i++) {
    var r = results[i];
    if (r.getStatus && r.getStatus() === 'OK') {
      parsed.push(safeJsonParse_(r.getReturnValue(), { findings:0, errors:1, scanned:0 }));
    } else {
      parsed.push({ findings:0, errors:1, scanned:0 });
    }
  }
  writeHealthLog_(parsed);
}

/*** ===== SHEETS HELPERS ===== ***/
function ensureSheetAndHeader_(ss, sheetName, header) {
  var sh = ss.getSheetByName(sheetName);
  if (!sh) {
    sh = ss.insertSheet(sheetName);
  }
  var rng = sh.getRange(1, 1, 1, header.length);
  var values = rng.getValues()[0];
  var needs = false;
  for (var i = 0; i < header.length; i++) {
    if (values[i] !== header[i]) { needs = true; break; }
  }
  if (needs) {
    rng.setValues([header]);
  }
  return sh;
}

function safeAppendSettingsRows_(sheetUrl, rows) {
  var ss = SpreadsheetApp.openByUrl(sheetUrl);
  var sh = ensureSheetAndHeader_(ss, TAB_SETTINGS, HDR_SETTINGS);
  appendRows_(sh, rows, HDR_SETTINGS.length);
}

function safeAppendLeverRows_(sheetUrl, rows) {
  var ss = SpreadsheetApp.openByUrl(sheetUrl);
  var sh = ensureSheetAndHeader_(ss, TAB_LEVERS, HDR_LEVERS);
  appendRows_(sh, rows, HDR_LEVERS.length);
}

function writeHealthLog_(items) {
  var ss = SpreadsheetApp.openByUrl(SPREADSHEET_URL);
  var sh = ensureSheetAndHeader_(ss, TAB_HEALTH, HDR_HEALTH);
  var tz = AdsApp.currentAccount().getTimeZone();
  var today = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');
  var totalAcc = 0, totalFindings = 0, totalErrors = 0;
  items.forEach(function(r){
    totalAcc     += (r.scanned  || 0);
    totalFindings+= (r.findings || 0);
    totalErrors  += (r.errors   || 0);
  });
  appendRows_(sh, [[today, 'Settings+Signals', totalAcc, totalFindings, totalErrors]], HDR_HEALTH.length);
}

function appendRows_(sh, rows, width) {
  if (!rows || !rows.length) return;
  var startRow = sh.getLastRow() + 1;
  var data = rows.map(function(r){
    var arr = r.slice(0, width);
    while (arr.length < width) arr.push('');
    return arr;
  });
  sh.getRange(startRow, 1, data.length, width).setValues(data);
}

/*** ===== GAQL & AWQL HELPERS ===== ***/
function getDateRange_(windowName) {
  var tz = AdsApp.currentAccount().getTimeZone();
  var now = new Date();
  var end = Utilities.formatDate(now, tz, 'yyyy-MM-dd');
  var days = 30;
  if (windowName === 'LAST_7_DAYS') days = 7;
  var startDate = new Date(now.getTime() - (days-1)*24*60*60*1000);
  var start = Utilities.formatDate(startDate, tz, 'yyyy-MM-dd');
  return { start: start, end: end };
}

function fetchCampaignTotalsGAQL_(windowName) {
  var range = getDateRange_(windowName);
  var q = [
    "SELECT",
    "  campaign.id,",
    "  campaign.name,",
    "  metrics.cost_micros,",
    "  metrics.conversions",
    "FROM campaign",
    "WHERE campaign.status = 'ENABLED'",
    "  AND segments.date BETWEEN '" + range.start + "' AND '" + range.end + "'"
  ].join("\n");

  var map = {};
  var it = AdsApp.search(q);
  while (it.hasNext()) {
    var row = it.next();
    var cid  = String(row.campaign.id);
    var name = row.campaign.name;
    var cost = microsToCurrency_(row.metrics.costMicros);
    var conv = toNum_(row.metrics.conversions);
    map[cid] = { name: name, cost: cost, conv: conv, cpa: calcCpa_(cost, conv) };
  }
  return map;
}

function fetchPartnersGAQL_(windowName) {
  var range = getDateRange_(windowName);
  var q = [
    "SELECT",
    "  campaign.id,",
    "  campaign.name,",
    "  segments.ad_network_type,",
    "  metrics.cost_micros,",
    "  metrics.conversions,",
    "  metrics.clicks,",
    "  metrics.impressions",
    "FROM campaign",
    "WHERE campaign.status = 'ENABLED'",
    "  AND advertising_channel_type = 'SEARCH'",
    "  AND segments.ad_network_type IN ('GOOGLE_SEARCH','SEARCH_PARTNERS')",
    "  AND segments.date BETWEEN '" + range.start + "' AND '" + range.end + "'"
  ].join("\n");

  var map = {};
  var it = AdsApp.search(q);
  while (it.hasNext()) {
    var row = it.next();
    var cid   = String(row.campaign.id);
    var name  = row.campaign.name;
    var net   = String(row.segments.adNetworkType || '');
    var cost  = microsToCurrency_(row.metrics.costMicros);
    var conv  = toNum_(row.metrics.conversions);
    var clicks= toNum_(row.metrics.clicks);
    var imps  = toNum_(row.metrics.impressions);

    if (!map[cid]) map[cid] = { name: name, search: {}, partners: {} };
    var bucket = (net.indexOf('PARTNERS') >= 0) ? 'partners' : 'search';
    var obj = map[cid][bucket];
    obj.cost = (obj.cost || 0) + cost;
    obj.conv = (obj.conv || 0) + conv;
    obj.clicks = (obj.clicks || 0) + clicks;
    obj.impressions = (obj.impressions || 0) + imps;
    map[cid][bucket] = obj;
  }
  // Compute CTRs
  Object.keys(map).forEach(function(cid){
    ['search','partners'].forEach(function(k){
      var o = map[cid][k] || {};
      o.ctr = (o.impressions > 0) ? (o.clicks / o.impressions) : 0;
      map[cid][k] = o;
    });
  });
  return map;
}

function fetchDevicesGAQL_(windowName) {
  var range = getDateRange_(windowName);
  var q = [
    "SELECT",
    "  campaign.id,",
    "  campaign.name,",
    "  segments.device,",
    "  metrics.cost_micros,",
    "  metrics.conversions",
    "FROM campaign",
    "WHERE campaign.status = 'ENABLED'",
    "  AND segments.date BETWEEN '" + range.start + "' AND '" + range.end + "'"
  ].join("\n");

  var map = {};
  var it = AdsApp.search(q);
  while (it.hasNext()) {
    var row = it.next();
    var cid   = String(row.campaign.id);
    var name  = row.campaign.name;
    var dev   = normalizeDeviceGAQL_(String(row.segments.device || ''));
    var cost  = microsToCurrency_(row.metrics.costMicros);
    var conv  = toNum_(row.metrics.conversions);
    var cpa   = calcCpa_(cost, conv);

    if (!map[cid]) map[cid] = { name: name, rows: [] };
    map[cid].rows.push({ device: dev, cost: cost, conv: conv, cpa: cpa });
  }
  return map;
}

function fetchGeoRegionsAWQL_(windowName) {
  var map = {}; // cid -> {name, rows:[{region,cost,conv,cpa}]}
  var q = [
    'SELECT CampaignId, CampaignName, Region, Cost, Conversions',
    'FROM GEO_PERFORMANCE_REPORT',
    'WHERE CampaignStatus = ENABLED',
    'DURING ' + windowName
  ].join(' ');
  try {
    var report = AdsApp.report(q);
    var it = report.rows();
    while (it.hasNext()) {
      var r = it.next();
      var cid    = r['CampaignId'];
      var name   = r['CampaignName'];
      var region = r['Region'];
      var cost   = parseMoney_(r['Cost']);
      var conv   = toNum_(r['Conversions']);
      var cpa    = calcCpa_(cost, conv);
      if (!map[cid]) map[cid] = { name: name, rows: [] };
      map[cid].rows.push({ region: region, cost: cost, conv: conv, cpa: cpa });
    }
  } catch(e) {}
  return map;
}

function fetchCustomerSettingsGAQL_() {
  var q = [
    "SELECT",
    "  customer.conversion_tracking_setting.enhanced_conversions_for_leads_enabled,",
    "  customer.call_reporting_setting.call_reporting_enabled,",
    "  customer.call_reporting_setting.call_conversion_action",
    "FROM customer",
    "LIMIT 1"
  ].join("\n");
  var it = AdsApp.search(q);
  if (!it.hasNext()) return { ecflEnabled: false, callReportingEnabled: false, callConversionAction: '' };
  var row = it.next();
  return {
    ecflEnabled: !!row.customer.conversionTrackingSetting.enhancedConversionsForLeadsEnabled,
    callReportingEnabled: !!row.customer.callReportingSetting.callReportingEnabled,
    callConversionAction: String(row.customer.callReportingSetting.callConversionAction || '')
  };
}

function fetchConversionActionsGAQL_() {
  var q = [
    "SELECT",
    "  conversion_action.name,",
    "  conversion_action.primary_for_goal,",
    "  conversion_action.attribution_model,",
    "  conversion_action.data_driven_model_status,",
    "  conversion_action.category,",
    "  conversion_action.status",
    "FROM conversion_action",
    "WHERE conversion_action.status = 'ENABLED'"
  ].join("\n");

  var out = [];
  var it = AdsApp.search(q);
  while (it.hasNext()) {
    var row = it.next();
    out.push({
      name: row.conversionAction.name,
      primary: !!row.conversionAction.primaryForGoal,
      attribModel: String(row.conversionAction.attributionModel || ''),
      ddaStatus: String(row.conversionAction.dataDrivenModelStatus || ''),
      category: String(row.conversionAction.category || '')
    });
  }
  return out;
}

function fetchAutoApplySubscriptionsGAQL_() {
  var q = [
    "SELECT",
    "  recommendation_subscription.type,",
    "  recommendation_subscription.status",
    "FROM recommendation_subscription"
  ].join("\n");

  var out = [];
  var it = AdsApp.search(q);
  while (it.hasNext()) {
    var row = it.next();
    out.push({
      type: String(row.recommendationSubscription.type || ''),
      status: String(row.recommendationSubscription.status || '')
    });
  }
  return out;
}

/*** ===== UTILS ===== ***/
function getCid_(){ return AdsApp.currentAccount().getCustomerId().replace(/-/g, ''); }
function microsToCurrency_(m){ var n = Number(m||0); return Math.round((n/1000000) * 100) / 100; }
function round2_(n){ n = toNum_(n); return isFinite(n) ? Math.round(n * 100) / 100 : ''; }
function toNum_(x){ var n = Number(x); return isNaN(n) ? 0 : n; }
function parseMoney_(s){ if (!s) return 0; var n = parseFloat(String(s).replace(/[^0-9.]+/g, '')); return isNaN(n) ? 0 : n; }
function calcCpa_(cost, conv){ cost = toNum_(cost); conv = toNum_(conv); return conv > 0 ? (cost / conv) : Infinity; }
function deltaPct_(a, b){ a = toNum_(a); b = toNum_(b); if (!isFinite(a) || !isFinite(b) || b === 0) return ''; return Math.round(((a - b) / b) * 10000)/100 + '%'; }
function computeModifier_(ratio){
  var delta = Math.abs(ratio - 1);
  var steps = Math.min(DEVGEO_MAX_MOD, Math.floor(delta / DEVGEO_STEP) * DEVGEO_STEP);
  if (steps <= 0) steps = DEVGEO_STEP;
  var pct = Math.round(steps * 100);
  return (ratio > 1 ? '-' : '+') + pct + '%';
}
function stringifyError_(e){
  if (!e) return 'Unknown error';
  if (e.stack) return e.message + ' :: ' + e.stack;
  return String(e && e.message || e);
}
function safeJsonParse_(s, fallback){
  try { return JSON.parse(s); } catch(e){ return fallback; }
}
function isManagerScope_(){
  try {
    if (typeof AdsManagerApp === 'undefined' || !AdsManagerApp.accounts) return false;
    AdsManagerApp.accounts().get(); // probe
    return true;
  } catch(e) { return false; }
}
function normalizeDeviceGAQL_(label) {
  label = String(label || '').toUpperCase();
  if (label.indexOf('DESKTOP') >= 0 || label.indexOf('COMPUTER') >= 0) return 'DESKTOP';
  if (label.indexOf('MOBILE') >= 0) return 'MOBILE';
  if (label.indexOf('TABLET') >= 0) return 'TABLET';
  return label || '(unknown)';
}
function isLeadCategory_(cat){
  var C = String(cat || '').toUpperCase();
  return (
    C.indexOf('LEAD') >= 0 ||
    C.indexOf('CONTACT') >= 0 ||
    C.indexOf('REQUEST_QUOTE') >= 0 ||
    C.indexOf('SUBMIT_LEAD_FORM') >= 0 ||
    C.indexOf('BOOK_APPOINTMENT') >= 0 ||
    C.indexOf('PHONE_CALL') >= 0
  );
}
function isRiskySubscription_(typeStr){
  var t = String(typeStr || '').toUpperCase();
  return (
    t.indexOf('BROAD_MATCH') >= 0 ||
    t.indexOf('AUTO') >= 0 ||
    t.indexOf('RAISE_BUDGET') >= 0 ||
    (t.indexOf('CREATE') >= 0 && t.indexOf('SEARCH') >= 0)
  );
}
function prettySubscriptionName_(typeStr){
  var t = String(typeStr || '');
  if (t.match(/BROAD_MATCH/i)) return 'Upgrade to Broad match';
  if (t.match(/RAISE_BUDGET/i)) return 'Raise budgets automatically';
  if (t.match(/AUTO/i)) return 'Automatically created assets';
  if (t.match(/CREATE.*SEARCH/i)) return 'Create new Search campaigns';
  return t;
}

/*** ===== MCC HELPERS ===== ***/
function getAllAccountIdsDedup_() {
  var sel = AdsManagerApp.accounts();
  if (MCC_ACCOUNT_LABEL_FILTERS && MCC_ACCOUNT_LABEL_FILTERS.length) {
    var quoted = MCC_ACCOUNT_LABEL_FILTERS.map(function(s){ return "'" + s.replace(/'/g, "\\'") + "'"; }).join(', ');
    sel = sel.withCondition("LabelNames CONTAINS_ANY [" + quoted + "]");
  }
  var seen = {};
  var ids = [];
  var it = sel.get();
  while (it.hasNext()) {
    var id = it.next().getCustomerId(); // keep dashes for withIds()
    if (!seen[id]) { seen[id] = true; ids.push(id); }
  }
  return ids;
}

/*** ===== ROW BUILDER ===== ***/
function makeSettingsRow_(date, cInfo, checkName, currentVal, expectedVal, severity, fixTip){
  return [
    date, getCid_(), AdsApp.currentAccount().getName(),
    cInfo.id || '', cInfo.name || '',
    checkName, currentVal, expectedVal, severity, fixTip
  ];
}
