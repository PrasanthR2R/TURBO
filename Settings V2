/*************************************************************
 * NEXUS — Settings + Signals Auditor (Apps Script, Google Ads API)
 * Keeps existing checks (Networks, Location, Language) and adds:
 * - Auto-apply recs with friendly labels
 * - ECFL (Enhanced Conversions for Leads) + Customer Data Terms
 * - Call Reporting + Default Call Action (reads details reliably)
 * - Lead actions Primary/Secondary
 *
 * Notes:
 * - The UI’s “Enhanced Conversions (web)” toggle is NOT exposed via GAQL.
 *   We no-op that probe to avoid 400 UNRECOGNIZED_FIELD.
 **************************************************************/

/** ================= HARD-CODED CONFIG (LIVE — HANDLE WITH CARE) ================= **/
const CONFIG = {
  // Google Ads MCC (no dashes)
  LOGIN_CUSTOMER_ID: '9684986590',

  // ---- API creds (sample placeholders from our dev sandbox) ----
  DEVELOPER_TOKEN:   'AdjR3yEAQDH206kqe7N5kg',
  CLIENT_ID:         '759464769302-cdsueuf69ro8jnmmupl7mfj0pceqaa64.apps.googleusercontent.com',
  CLIENT_SECRET:     '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',
  REFRESH_TOKEN:     '1//04ft7GM30EMFsCgYIARAAGAQSNwF-L9IrHrF9ohKw9gJyXX7GSvEv1JH0f6kSoU6DhZaKum6-odIY9mkq1LrGpJNzBxvTUwNDZCA',

  // Output sheet (gid URL ok; we normalize to /edit)
  OUTPUT_SHEET_URL:  'https://docs.google.com/spreadsheets/d/1VjU6Rs_44TeXtyXmLJriA9TosTcgA_H3bCT7-ZXk-F4/edit?gid=983095729#gid=983095729',

  // API version
  API_VERSION: 'v21',

  // Tabs & headers
  TAB_SETTINGS: 'Settings_Audit',
  TAB_HEALTH:   'NEXUS_Engine_Health_Log',
  HDR_SETTINGS: ['Date','Customer ID','Account','Campaign ID','Campaign','Check','Current','Expected','Severity','Fix Tip'],
  HDR_HEALTH:   ['Date','Module','Accounts Scanned','Findings Count','Errors'],

  // Risky auto-apply patterns
  RISKY_AUTO_APPLY_HINTS: ['BROAD_MATCH','CREATE_SEARCH','AUTO_ASSET','AUTO.*ASSET','RAISE_BUDGET']
};
/** ============================================================================ **/

/** =============================== ENTRY =============================== **/
function runNexusAudit() {
  const started = new Date();
  const tz = Session.getScriptTimeZone() || 'UTC';
  const today = Utilities.formatDate(new Date(), tz, 'yyyy-MM-dd');

  const ss = SpreadsheetApp.openByUrl(normalizeSheetUrl_(CONFIG.OUTPUT_SHEET_URL));
  const shSettings = ensureSheet_(ss, CONFIG.TAB_SETTINGS, CONFIG.HDR_SETTINGS);
  const shHealth   = ensureSheet_(ss, CONFIG.TAB_HEALTH,   CONFIG.HDR_HEALTH);

  let findings = 0, errors = 0, scanned = 0;

  try {
    const clients = listAllChildAccounts_();
    clients.forEach(c => {
      try {
        // === Campaign settings (SEARCH only) — unchanged logic ===
        try {
          const settings = listCampaignSettings_(c.customerId);
          settings.forEach(s => {
            if (s.search) {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, s.id, s.name,
                'Search Network', 'ON', 'OFF', 'High',
                'Campaign → Settings → Networks → uncheck "Search Network".']], CONFIG.HDR_SETTINGS.length);
            }
            if (s.partners) {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, s.id, s.name,
                'Search Partners', 'ON', 'OFF', 'High',
                'Campaign → Settings → Networks → uncheck "Search partners".']], CONFIG.HDR_SETTINGS.length);
            }
            if (s.display) {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, s.id, s.name,
                'Display Expansion', 'ON', 'OFF', 'High',
                'Campaign → Settings → Networks → uncheck "Display Expansion".']], CONFIG.HDR_SETTINGS.length);
            }
            if (s.posGeo && String(s.posGeo).toUpperCase() !== 'PRESENCE') {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, s.id, s.name,
                'Location Option', s.posGeo, 'PRESENCE', 'High',
                'Campaign → Settings → Location options → set to Presence only']], CONFIG.HDR_SETTINGS.length);
            }
          });
        } catch(e){ logClientErrorRow_(shSettings, today, c, 'Campaign Settings', e); }

        // === Language targeting (flag only if not English OR All languages) — unchanged behaviour ===
        try {
          const langIssues = listLanguageIssues_(c.customerId);
          langIssues.forEach(l => {
            findings++;
            appendRows_(shSettings, [[today, c.customerId, c.name, l.campId, l.campName,
              'Language Targeting', l.current, 'English only', 'Medium',
              'Campaign → Settings → Languages → set to English only']], CONFIG.HDR_SETTINGS.length);
          });
        } catch(e){ logClientErrorRow_(shSettings, today, c, 'Language Targeting', e); }

        // === Auto-apply recommendations (friendly labels) ===
        try {
          const subs = listAutoApply_(c.customerId); // [{type,status}]
          subs.filter(s => s.status === 'ENABLED').forEach(s => {
            const sev = isRiskySub_(s.type) ? 'High' : 'Info';
            findings++;
            appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
              'Auto-apply Recommendation', friendlySubLabel_(s.type), 'OFF', sev,
              'Recommendations → Auto-apply → turn OFF (if not intentional)']], CONFIG.HDR_SETTINGS.length);
          });
        } catch(e){ logClientErrorRow_(shSettings, today, c, 'Auto-apply Recommendation', e); }

        // === Conversions & goals (ECFL, Terms, Call reporting, Call default, Lead primary) ===
        try {
          const convCust = getConversionCustomer_(c.customerId) || c.customerId;

          // Customer Data Terms (pair with ECFL)
          try {
            const terms = getCustomerDataTerms_(convCust);
            if (terms === false) {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                'Customer Data Terms', 'Not accepted', 'Accepted', 'High',
                'Goals → Settings → Accept Customer Data Terms']], CONFIG.HDR_SETTINGS.length);
            }
          } catch(e){ logClientErrorRow_(shSettings, today, c, 'Customer Data Terms', e); }

          // Enhanced Conversions for Leads (ECFL)
          try {
            const ecfl = getECFLEnabled_(convCust);
            if (ecfl === false) {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                'Enhanced Conversions for Leads', 'OFF', 'ON', 'High',
                'Goals → Settings → Turn ON Enhanced Conversions for Leads']], CONFIG.HDR_SETTINGS.length);
            }
          } catch(e){ logClientErrorRow_(shSettings, today, c, 'Enhanced Conversions for Leads', e); }

          // Enhanced Conversions (web) — NOT EXPOSED BY API. No-op (kept for UI parity).
          try {
            const ecw = getECWebEnabled_(convCust); // null by design
            if (ecw === false) {
              // never fires; left for future if Google exposes a field
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                'Enhanced Conversions (web)', 'OFF', 'ON', 'Medium',
                'Goals → Settings → Turn ON Enhanced Conversions (web)']], CONFIG.HDR_SETTINGS.length);
            }
          } catch(e){ logClientErrorRow_(shSettings, today, c, 'Enhanced Conversions (web)', e); }

          // Call reporting & default call action
          try {
            const callCfg = getCallReporting_(c.customerId); // {enabled, reporting, actionResName}
            if (!callCfg.enabled) {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                'Call Reporting', 'OFF', 'ON', 'High',
                'Goals → Settings → Enable Call reporting']], CONFIG.HDR_SETTINGS.length);
            }
            if (!callCfg.reporting) {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                'Call Conversion Reporting', 'OFF', 'ON', 'High',
                'Goals → Settings → Enable call conversion reporting']], CONFIG.HDR_SETTINGS.length);
            }
            if (!callCfg.actionResName) {
              findings++;
              appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                'Call Conversion Action', 'None', 'Enabled + Default', 'High',
                'Goals → Settings → Set a default Call conversion action']], CONFIG.HDR_SETTINGS.length);
            } else {
              // Query details from the true owner account parsed from the resource name
              const det = getConversionActionByRes_(c.customerId, callCfg.actionResName);
              if (det) {
                if (String(det.status).toUpperCase() !== 'ENABLED') {
                  findings++;
                  appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                    'Call Conversion Action', `${det.name} (${det.status})`, 'ENABLED', 'High',
                    'Goals → Conversions → Enable this action']], CONFIG.HDR_SETTINGS.length);
                }
                if (!/CALL/i.test(String(det.category)) && !/CALL/i.test(String(det.type))) {
                  findings++;
                  appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                    'Call Conversion Action', `${det.name} (category=${det.category || det.type})`, 'CALL-type', 'High',
                    'Goals → Conversions → Default must be a Call-type action']], CONFIG.HDR_SETTINGS.length);
                }
              } else {
                findings++;
                appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                  'Call Conversion Action', 'Default set (details not accessible)', 'CALL-type & ENABLED', 'Info',
                  'Open Goals → Conversions and confirm default is a Call-type action']], CONFIG.HDR_SETTINGS.length);
              }
            }
          } catch(e){ logClientErrorRow_(shSettings, today, c, 'Call Reporting / Default Call', e); }

          // Lead actions: Primary vs Secondary (no attribution fields to avoid GAQL 400s)
          try {
            let acts = [];
            try { acts = listConversionActions_(convCust); } catch(e1){ /* fallback next */ }
            if (!acts.length && convCust !== c.customerId) {
              try { acts = listConversionActions_(c.customerId); } catch(e2){ /* give up */ }
            }
            acts.forEach(a => {
              if (isLeadCategory_(a.category) && !a.primary) {
                findings++;
                appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
                  'Primary vs Secondary', 'Secondary ('+a.name+')', 'Primary', 'High',
                  'Goals → Conversions → Mark as Primary']], CONFIG.HDR_SETTINGS.length);
              }
            });
          } catch(e){ logClientErrorRow_(shSettings, today, c, 'Conversions Read', e); }

        } catch(e){ logClientErrorRow_(shSettings, today, c, 'Conversions Block', e); }

        scanned++;
      } catch (e) {
        errors++;
        appendRows_(shSettings, [[today, c.customerId, c.name, '', '',
          'Client Audit Error', String(e), '—', 'High', 'Check API access/permissions.']], CONFIG.HDR_SETTINGS.length);
      }
    });
  } catch (e) {
    errors++;
    appendRows_(shSettings, [[today, CONFIG.LOGIN_CUSTOMER_ID, 'MCC Worker Error', '', '',
      'Global Error', String(e), '—', 'High', 'Check credentials']], CONFIG.HDR_SETTINGS.length);
  }

  appendRows_(shHealth, [[today, 'Settings+Signals(API)', scanned, findings, errors]], CONFIG.HDR_HEALTH.length);
  Logger.log('Done. accounts=%s findings=%s errors=%s in %s sec',
             scanned, findings, errors, Math.round((new Date() - started)/1000));
}

/** =================== UTIL ROW WRITER =================== **/
function logClientErrorRow_(shSettings, today, client, label, e){
  appendRows_(shSettings, [[today, client.customerId, client.name, '', '',
    label, 'Access/Query Error: ' + String(e).slice(0,180), 'Readable', 'Info',
    'Verify permissions / query']], CONFIG.HDR_SETTINGS.length);
}

/** =================== CHILD ACCOUNT ENUMERATOR =================== **/
function listAllChildAccounts_() {
  const q = [
    'SELECT',
    '  customer_client.client_customer,',
    '  customer_client.descriptive_name,',
    '  customer_client.manager',
    'FROM customer_client',
    'WHERE customer_client.manager = FALSE'
  ].join('\n');
  const batches = gaqlStream_(CONFIG.LOGIN_CUSTOMER_ID, q, CONFIG.LOGIN_CUSTOMER_ID);
  const out = [];
  batches.forEach(b => (b.results||[]).forEach(r => {
    const res = r.customerClient || r.customer_client;
    if (!res) return;
    const id = String(res.clientCustomer || '').replace('customers/','');
    const name = String(res.descriptiveName || '');
    out.push({ customerId: id, name: name });
  }));
  return out;
}

/** =================== CAMPAIGN SETTINGS (SEARCH only) =================== **/
function listCampaignSettings_(customerId) {
  const q = [
    'SELECT',
    '  campaign.id,',
    '  campaign.name,',
    '  campaign.advertising_channel_type,',
    '  campaign.status,',
    '  campaign.network_settings.target_search_network,',
    '  campaign.network_settings.target_partner_search_network,',
    '  campaign.network_settings.target_content_network,',
    '  campaign.geo_target_type_setting.positive_geo_target_type',
    'FROM campaign',
    "WHERE campaign.status = 'ENABLED'",
    "  AND campaign.advertising_channel_type = 'SEARCH'"
  ].join('\n');

  try {
    const batches = gaqlStream_(customerId, q, CONFIG.LOGIN_CUSTOMER_ID);
    const out = [];
    batches.forEach(b => (b.results||[]).forEach(r => {
      const c = r.campaign;
      if (!c) return;
      out.push({
        id: String(c.id),
        name: String(c.name || ''),
        channel: String(c.advertisingChannelType || c.advertising_channel_type || ''),
        search: !!(c.networkSettings?.targetSearchNetwork ?? c.network_settings?.target_search_network),
        partners: !!(c.networkSettings?.targetPartnerSearchNetwork ?? c.network_settings?.target_partner_search_network),
        display: !!(c.networkSettings?.targetContentNetwork ?? c.network_settings?.target_content_network),
        posGeo: String((c.geoTargetTypeSetting?.positiveGeoTargetType ?? c.geo_target_type_setting?.positive_geo_target_type) || '')
      });
    }));
    return out;
  } catch (e) {
    Logger.log("❌ Query failed for listCampaignSettings_ cust=%s :: %s", customerId, e);
    return [];
  }
}

/** =================== LANGUAGE UTILITIES =================== **/
function listSearchCampaigns_(customerId) {
  const q = [
    'SELECT',
    '  campaign.id,',
    '  campaign.name',
    'FROM campaign',
    "WHERE campaign.status = 'ENABLED'",
    "  AND campaign.advertising_channel_type = 'SEARCH'"
  ].join('\n');

  const batches = gaqlStream_(customerId, q, CONFIG.LOGIN_CUSTOMER_ID);
  const out = [];
  batches.forEach(b => (b.results||[]).forEach(r => {
    const c = r.campaign;
    if (c) out.push({ id: String(c.id), name: String(c.name || '') });
  }));
  return out;
}

function getLanguageNameMap_(customerId) {
  const q = [
    'SELECT',
    '  language_constant.resource_name,',
    '  language_constant.name',
    'FROM language_constant'
  ].join('\n');

  const batches = gaqlStream_(customerId, q, CONFIG.LOGIN_CUSTOMER_ID);
  const map = {};
  batches.forEach(b => (b.results||[]).forEach(r => {
    const rn = String(r.languageConstant?.resourceName || r.language_constant?.resource_name || '');
    const name = String(r.languageConstant?.name || r.language_constant?.name || '');
    if (rn) map[rn] = name || rn;
  }));
  if (!map['languageConstants/1000']) map['languageConstants/1000'] = 'English';
  return map;
}

function listLanguageIssues_(customerId) {
  const campaigns = listSearchCampaigns_(customerId);
  const byId = {};
  campaigns.forEach(c => byId[c.id] = { name: c.name, langs: new Set() });

  const q = [
    'SELECT',
    '  campaign.id,',
    '  campaign_criterion.language.language_constant',
    'FROM campaign_criterion',
    "WHERE campaign_criterion.type = 'LANGUAGE'"
  ].join('\n');

  const batches = gaqlStream_(customerId, q, CONFIG.LOGIN_CUSTOMER_ID);
  batches.forEach(b => (b.results||[]).forEach(r => {
    const cid = String(r.campaign?.id || '');
    const lc  = String(r.campaignCriterion?.language?.languageConstant ||
                       r.campaign_criterion?.language?.language_constant || '');
    if (byId[cid] && lc) byId[cid].langs.add(lc);
  }));

  const langMap = getLanguageNameMap_(customerId);
  const toName = (res) => langMap[res] || res;

  const issues = [];
  Object.keys(byId).forEach(cid => {
    const rec = byId[cid];
    const langIds = Array.from(rec.langs);
    if (langIds.length === 0) {
      issues.push({ campId: cid, campName: rec.name, current: 'All languages' });
      return;
    }
    const names = langIds.map(toName);
    const onlyEnglish = (names.length === 1 && /english/i.test(names[0]));
    if (!onlyEnglish) issues.push({ campId: cid, campName: rec.name, current: names.join(', ') });
  });

  return issues;
}

/** =================== AUTO-APPLY RECOMMENDATIONS =================== **/
function listAutoApply_(customerId) {
  const q = [
    'SELECT',
    '  recommendation_subscription.type,',
    '  recommendation_subscription.status',
    'FROM recommendation_subscription'
  ].join('\n');
  const batches = gaqlStream_(customerId, q, CONFIG.LOGIN_CUSTOMER_ID);
  const out = [];
  batches.forEach(b => (b.results||[]).forEach(r => {
    const s = r.recommendationSubscription || r.recommendation_subscription;
    if (!s) return;
    out.push({ type: String(s.type || ''), status: String(s.status || '') });
  }));
  return out;
}

function isRiskySub_(typeStr){
  const T = String(typeStr||'').toUpperCase();
  if (/(BROAD|CREATE.*SEARCH|AUTO.*ASSET|RAISE.*BUDGET)/i.test(T)) return true;
  return !/REMOVE_REDUNDANT_KEYWORDS|REMOVE_NON_SERVING_KEYWORDS|OPTIMIZE_AD_ROTATION|USE_OPTIMIZED_AD_ROTATION|UPGRADE_CONVERSION_TRACKING|ADD_STORE_VISITS|REMOVE_CONFLICTING_NEGATIVE_KEYWORDS|BID_MORE_EFFICIENTLY/i.test(T);
}

function friendlySubLabel_(typeStr){
  const T = String(typeStr || '').toUpperCase();
  const MAP = {
    KEYWORD: 'Keywords auto-apply is ON',
    MAXIMIZE_CONVERSIONS_OPT_IN: 'Maximize Conversions auto-apply is ON',
    TARGET_CPA_OPT_IN: 'Target CPA auto-apply is ON',
    RAISE_TARGET_CPA: 'Raise target CPA auto-apply is ON',
    USE_OPTIMIZED_AD_ROTATION: 'Optimized ad rotation is ON',
    CREATE_SEARCH_CAMPAIGN: 'Create Search campaign auto-apply is ON',
    BROAD_MATCH_OPT_IN: 'Broad match auto-apply is ON',
    AUTO_ASSET: 'Auto assets are ON'
  };
  if (MAP[T]) return MAP[T];
  const pretty = T.replace(/_/g,' ').toLowerCase().replace(/\b\w/g, m => m.toUpperCase());
  return `Auto-apply: ${pretty} is ON`;
}

function prettySub_(typeStr){
  return friendlySubLabel_(typeStr);
}

/** =================== CONVERSIONS & GOALS =================== **/
function getConversionCustomer_(customerId) {
  const q = [
    'SELECT',
    '  customer.conversion_tracking_setting.google_ads_conversion_customer',
    'FROM customer'
  ].join('\n');
  const batches = gaqlStream_(customerId, q, CONFIG.LOGIN_CUSTOMER_ID);
  for (let i=0;i<batches.length;i++){
    const arr = batches[i].results || [];
    for (let j=0;j<arr.length;j++){
      const row = arr[j];
      const conv = row.customer?.conversionTrackingSetting?.googleAdsConversionCustomer ||
                   row.customer?.conversion_tracking_setting?.google_ads_conversion_customer || '';
      if (conv) return String(conv).replace('customers/','');
    }
  }
  return '';
}

function getCustomerDataTerms_(custId){
  const q = `
    SELECT customer.conversion_tracking_setting.accepted_customer_data_terms
    FROM customer LIMIT 1`;
  const b = gaqlStream_(custId, q, CONFIG.LOGIN_CUSTOMER_ID);
  for (const chunk of b) for (const row of (chunk.results||[])) {
    const v = row.customer?.conversionTrackingSetting?.acceptedCustomerDataTerms ??
              row.customer?.conversion_tracking_setting?.accepted_customer_data_terms;
    return !!v;
  }
  return false;
}

function getECFLEnabled_(conversionCustomerId) {
  const q = [
    'SELECT',
    '  customer.conversion_tracking_setting.enhanced_conversions_for_leads_enabled',
    'FROM customer',
    'LIMIT 1'
  ].join('\n');
  const batches = gaqlStream_(conversionCustomerId, q, CONFIG.LOGIN_CUSTOMER_ID);
  for (const b of batches){
    const arr = b.results || [];
    for (const row of arr){
      const flag = row.customer?.conversionTrackingSetting?.enhancedConversionsForLeadsEnabled ??
                   row.customer?.conversion_tracking_setting?.enhanced_conversions_for_leads_enabled;
      return !!flag;
    }
  }
  return false;
}

// Enhanced Conversions (web) toggle — NOT AVAILABLE via API; deliberate no-op.
function getECWebEnabled_(conversionCustomerId) {
  return null; // keep for future compatibility
}

function getCallReporting_(customerId) {
  const q = [
    'SELECT',
    '  customer.call_reporting_setting.call_reporting_enabled,',
    '  customer.call_reporting_setting.call_conversion_reporting_enabled,',
    '  customer.call_reporting_setting.call_conversion_action',
    'FROM customer',
    'LIMIT 1'
  ].join('\n');
  const batches = gaqlStream_(customerId, q, CONFIG.LOGIN_CUSTOMER_ID);
  let enabled = false, reporting = false, actionResName = '';
  batches.forEach(b => (b.results||[]).forEach(r => {
    const cr = r.customer?.callReportingSetting || r.customer?.call_reporting_setting;
    if (!cr) return;
    enabled   = !!(cr.callReportingEnabled ?? cr.call_reporting_enabled);
    reporting = !!(cr.callConversionReportingEnabled ?? cr.call_conversion_reporting_enabled);
    actionResName = String((cr.callConversionAction ?? cr.call_conversion_action) || '');
  }));
  return { enabled, reporting, actionResName };
}

function listConversionActions_(conversionCustomerId) {
  // v21: avoid unrecognized fields (attribution_model, data_driven_model_status)
  const q = [
    'SELECT',
    '  conversion_action.resource_name,',
    '  conversion_action.name,',
    '  conversion_action.status,',
    '  conversion_action.primary_for_goal,',
    '  conversion_action.category,',
    '  conversion_action.type',
    'FROM conversion_action',
    "WHERE conversion_action.status = 'ENABLED'"
  ].join('\n');
  try {
    const batches = gaqlStream_(conversionCustomerId, q, CONFIG.LOGIN_CUSTOMER_ID);
    const out = [];
    batches.forEach(b => (b.results||[]).forEach(r => {
      const ca = r.conversionAction || r.conversion_action;
      if (!ca) return;
      out.push({
        res: String(ca.resourceName || ca.resource_name || ''),
        name: String(ca.name || ''),
        primary: !!(ca.primaryForGoal ?? ca.primary_for_goal),
        category: String(ca.category || ''),
        type: String(ca.type || ''),
        status: String(ca.status || '')
      });
    }));
    return out;
  } catch (e) {
    Logger.log("❌ ConversionAction query failed for cust=%s :: %s", conversionCustomerId, e);
    return [];
  }
}

function getConversionActionByRes_(anyCustomerId, resourceName){
  if (!resourceName) return null;

  // Extract true owner customer ID from the resource name: customers/{owner}/conversionActions/{id}
  const m = String(resourceName).match(/^customers\/(\d+)\/conversionActions\/\d+$/);
  const ownerCid = m ? m[1] : anyCustomerId; // fallback if pattern fails

  const q = [
    'SELECT',
    '  conversion_action.name,',
    '  conversion_action.status,',
    '  conversion_action.category,',
    '  conversion_action.type,',
    '  conversion_action.primary_for_goal',
    'FROM conversion_action',
    `WHERE conversion_action.resource_name = '${resourceName}'`,
    'LIMIT 1'
  ].join('\n');
  try {
    // Query the owner account (this fixes “details not accessible” false negatives)
    const batches = gaqlStream_(ownerCid, q, CONFIG.LOGIN_CUSTOMER_ID);
    for (const b of batches) {
      const arr = b.results || [];
      for (const r of arr) {
        const ca = r.conversionAction || r.conversion_action;
        if (ca) return {
          name: String(ca.name || ''),
          status: String(ca.status || ''),
          category: String(ca.category || ''),
          type: String(ca.type || ''),
          primary_for_goal: !!(ca.primaryForGoal ?? ca.primary_for_goal)
        };
      }
    }
  } catch(e){
    Logger.log("❌ getConversionActionByRes_ failed for ownerCid=%s :: %s", ownerCid, e);
  }
  return null;
}

/** =================== GAQL WRAPPER WITH DEBUG =================== **/
function gaqlStream_(customerId, query, loginId) {
  const token = getAccessToken_();
  const url = `https://googleads.googleapis.com/${CONFIG.API_VERSION}/customers/${customerId}/googleAds:searchStream`;
  const payload = JSON.stringify({ query });
  const headers = {
    Authorization: 'Bearer ' + token,
    'developer-token': CONFIG.DEVELOPER_TOKEN,
    'login-customer-id': loginId || CONFIG.LOGIN_CUSTOMER_ID,
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  };
  const res = UrlFetchApp.fetch(url, { method: 'post', payload, headers, muteHttpExceptions: true });
  const code = res.getResponseCode();
  const text = res.getContentText();
  if (code >= 300) {
    Logger.log("❌ GAQL FAILED for cust=%s :: HTTP %s\nQuery=\n%s\nResponse=%s", customerId, code, query, text);
    throw new Error('GAQL ' + code + ' :: ' + text);
  }
  let out;
  try {
    out = JSON.parse(text);
    if (!Array.isArray(out)) out = [out];
  } catch (e) {
    out = text.split(/\r?\n/).map(s => s.trim()).filter(Boolean).map(s => {
      try { return JSON.parse(s); } catch(_){ return {}; }
    });
  }
  return out;
}

/** =================== AUTH =================== **/
function getAccessToken_() {
  const url = 'https://oauth2.googleapis.com/token';
  const payload = {
    client_id: CONFIG.CLIENT_ID,
    client_secret: CONFIG.CLIENT_SECRET,
    refresh_token: CONFIG.REFRESH_TOKEN,
    grant_type: 'refresh_token'
  };
  const res = UrlFetchApp.fetch(url, { method: 'post', payload: payload, muteHttpExceptions: true });
  const code = res.getResponseCode();
  const text = res.getContentText();
  if (code >= 300) throw new Error('OAuth token refresh failed ' + code + ' :: ' + text);
  const json = JSON.parse(text);
  return json.access_token;
}

/** =================== SHEETS HELPERS =================== **/
function ensureSheet_(ss, name, header) {
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name);
  const range = sh.getRange(1,1,1,header.length);
  const cur = range.getValues()[0];
  let needs = false;
  for (let i=0;i<header.length;i++) if (cur[i] !== header[i]) { needs = true; break; }
  if (needs) range.setValues([header]);
  return sh;
}

function appendRows_(sh, rows, width) {
  if (!rows || !rows.length) return;
  const data = rows.map(r => {
    const a = r.slice(0,width);
    while (a.length < width) a.push('');
    return a;
  });
  const start = sh.getLastRow()+1;
  sh.getRange(start,1,data.length,width).setValues(data);
}

/** =================== MISC =================== **/
function normalizeSheetUrl_(u){
  if (!u) return u;
  const m = String(u).match(/^(https:\/\/docs\.google\.com\/spreadsheets\/d\/[^/]+\/edit)/i);
  return m ? m[1] : u;
}

function isLeadCategory_(cat) {
  const C = String(cat||'').toUpperCase();
  return (C.indexOf('LEAD')>=0 || C.indexOf('CONTACT')>=0 || C.indexOf('REQUEST_QUOTE')>=0 ||
          C.indexOf('SUBMIT_LEAD_FORM')>=0 || C.indexOf('BOOK_APPOINTMENT')>=0 || C.indexOf('PHONE_CALL')>=0);
}
